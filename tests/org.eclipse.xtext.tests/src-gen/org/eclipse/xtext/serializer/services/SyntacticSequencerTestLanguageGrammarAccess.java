/*
* generated by Xtext
*/

package org.eclipse.xtext.serializer.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SyntacticSequencerTestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cX1Assignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cX1MandatoryKeywordsParserRuleCall_0_0 = (RuleCall)cX1Assignment_0.eContents().get(0);
		private final Assignment cX2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cX2Exp0ParserRuleCall_1_0 = (RuleCall)cX2Assignment_1.eContents().get(0);
		private final Assignment cX3Assignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cX3Exp1ParserRuleCall_2_0 = (RuleCall)cX3Assignment_2.eContents().get(0);
		private final Assignment cX4Assignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cX4Exp2ParserRuleCall_3_0 = (RuleCall)cX4Assignment_3.eContents().get(0);
		private final Assignment cX5Assignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cX5SingleCrossReferenceParserRuleCall_4_0 = (RuleCall)cX5Assignment_4.eContents().get(0);
		private final Assignment cX6Assignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cX6BooleanAlternativeParserRuleCall_5_0 = (RuleCall)cX6Assignment_5.eContents().get(0);
		private final Assignment cX7Assignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cX7UnassignedDatatypeParserRuleCall_6_0 = (RuleCall)cX7Assignment_6.eContents().get(0);
		private final Assignment cX8Assignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cX8OptionalSingleTransitionParserRuleCall_7_0 = (RuleCall)cX8Assignment_7.eContents().get(0);
		private final Assignment cX9Assignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cX9OptionalManyTransitionParserRuleCall_8_0 = (RuleCall)cX9Assignment_8.eContents().get(0);
		private final Assignment cX10Assignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cX10MandatoryManyTransitionParserRuleCall_9_0 = (RuleCall)cX10Assignment_9.eContents().get(0);
		private final Assignment cX11Assignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cX11AlternativeTransitionParserRuleCall_10_0 = (RuleCall)cX11Assignment_10.eContents().get(0);
		
		//Model:
		//	x1=MandatoryKeywords | x2=Exp0 | x3=Exp1 | x4=Exp2 | x5=SingleCrossReference | x6=BooleanAlternative |
		//	x7=UnassignedDatatype | x8=OptionalSingleTransition | x9=OptionalManyTransition | x10=MandatoryManyTransition |
		//	x11=AlternativeTransition;
		public ParserRule getRule() { return rule; }

		//x1=MandatoryKeywords | x2=Exp0 | x3=Exp1 | x4=Exp2 | x5=SingleCrossReference | x6=BooleanAlternative |
		//x7=UnassignedDatatype | x8=OptionalSingleTransition | x9=OptionalManyTransition | x10=MandatoryManyTransition |
		//x11=AlternativeTransition
		public Alternatives getAlternatives() { return cAlternatives; }

		//x1=MandatoryKeywords
		public Assignment getX1Assignment_0() { return cX1Assignment_0; }

		//MandatoryKeywords
		public RuleCall getX1MandatoryKeywordsParserRuleCall_0_0() { return cX1MandatoryKeywordsParserRuleCall_0_0; }

		//x2=Exp0
		public Assignment getX2Assignment_1() { return cX2Assignment_1; }

		//Exp0
		public RuleCall getX2Exp0ParserRuleCall_1_0() { return cX2Exp0ParserRuleCall_1_0; }

		//x3=Exp1
		public Assignment getX3Assignment_2() { return cX3Assignment_2; }

		//Exp1
		public RuleCall getX3Exp1ParserRuleCall_2_0() { return cX3Exp1ParserRuleCall_2_0; }

		//x4=Exp2
		public Assignment getX4Assignment_3() { return cX4Assignment_3; }

		//Exp2
		public RuleCall getX4Exp2ParserRuleCall_3_0() { return cX4Exp2ParserRuleCall_3_0; }

		//x5=SingleCrossReference
		public Assignment getX5Assignment_4() { return cX5Assignment_4; }

		//SingleCrossReference
		public RuleCall getX5SingleCrossReferenceParserRuleCall_4_0() { return cX5SingleCrossReferenceParserRuleCall_4_0; }

		//x6=BooleanAlternative
		public Assignment getX6Assignment_5() { return cX6Assignment_5; }

		//BooleanAlternative
		public RuleCall getX6BooleanAlternativeParserRuleCall_5_0() { return cX6BooleanAlternativeParserRuleCall_5_0; }

		//x7=UnassignedDatatype
		public Assignment getX7Assignment_6() { return cX7Assignment_6; }

		//UnassignedDatatype
		public RuleCall getX7UnassignedDatatypeParserRuleCall_6_0() { return cX7UnassignedDatatypeParserRuleCall_6_0; }

		//x8=OptionalSingleTransition
		public Assignment getX8Assignment_7() { return cX8Assignment_7; }

		//OptionalSingleTransition
		public RuleCall getX8OptionalSingleTransitionParserRuleCall_7_0() { return cX8OptionalSingleTransitionParserRuleCall_7_0; }

		//x9=OptionalManyTransition
		public Assignment getX9Assignment_8() { return cX9Assignment_8; }

		//OptionalManyTransition
		public RuleCall getX9OptionalManyTransitionParserRuleCall_8_0() { return cX9OptionalManyTransitionParserRuleCall_8_0; }

		//x10=MandatoryManyTransition
		public Assignment getX10Assignment_9() { return cX10Assignment_9; }

		//MandatoryManyTransition
		public RuleCall getX10MandatoryManyTransitionParserRuleCall_9_0() { return cX10MandatoryManyTransitionParserRuleCall_9_0; }

		//x11=AlternativeTransition
		public Assignment getX11Assignment_10() { return cX11Assignment_10; }

		//AlternativeTransition
		public RuleCall getX11AlternativeTransitionParserRuleCall_10_0() { return cX11AlternativeTransitionParserRuleCall_10_0; }
	}

	public class MandatoryKeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MandatoryKeywords");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVal1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVal1IDTerminalRuleCall_1_0 = (RuleCall)cVal1Assignment_1.eContents().get(0);
		private final Keyword cKw1Keyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVal2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVal2IDTerminalRuleCall_3_0 = (RuleCall)cVal2Assignment_3.eContents().get(0);
		private final Keyword cKw2Keyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cKw3Keyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cVal3Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVal3IDTerminalRuleCall_6_0 = (RuleCall)cVal3Assignment_6.eContents().get(0);
		private final Keyword cKw4Keyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MandatoryKeywords:
		//	"#1" val1=ID "kw1" val2=ID "kw2" "kw3" val3=ID "kw4";
		public ParserRule getRule() { return rule; }

		//"#1" val1=ID "kw1" val2=ID "kw2" "kw3" val3=ID "kw4"
		public Group getGroup() { return cGroup; }

		//"#1"
		public Keyword getNumberSignDigitOneKeyword_0() { return cNumberSignDigitOneKeyword_0; }

		//val1=ID
		public Assignment getVal1Assignment_1() { return cVal1Assignment_1; }

		//ID
		public RuleCall getVal1IDTerminalRuleCall_1_0() { return cVal1IDTerminalRuleCall_1_0; }

		//"kw1"
		public Keyword getKw1Keyword_2() { return cKw1Keyword_2; }

		//val2=ID
		public Assignment getVal2Assignment_3() { return cVal2Assignment_3; }

		//ID
		public RuleCall getVal2IDTerminalRuleCall_3_0() { return cVal2IDTerminalRuleCall_3_0; }

		//"kw2"
		public Keyword getKw2Keyword_4() { return cKw2Keyword_4; }

		//"kw3"
		public Keyword getKw3Keyword_5() { return cKw3Keyword_5; }

		//val3=ID
		public Assignment getVal3Assignment_6() { return cVal3Assignment_6; }

		//ID
		public RuleCall getVal3IDTerminalRuleCall_6_0() { return cVal3IDTerminalRuleCall_6_0; }

		//"kw4"
		public Keyword getKw4Keyword_7() { return cKw4Keyword_7; }
	}

	public class Exp0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitTwoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAddition0ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Exp0:
		//	"#2" Addition0;
		public ParserRule getRule() { return rule; }

		//"#2" Addition0
		public Group getGroup() { return cGroup; }

		//"#2"
		public Keyword getNumberSignDigitTwoKeyword_0() { return cNumberSignDigitTwoKeyword_0; }

		//Addition0
		public RuleCall getAddition0ParserRuleCall_1() { return cAddition0ParserRuleCall_1; }
	}

	public class Addition0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrim0ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdd0LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrim0ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition0 returns Exp0:
		//	Prim0 ({Add0.left=current} "+" right=Prim0)*;
		public ParserRule getRule() { return rule; }

		//Prim0 ({Add0.left=current} "+" right=Prim0)*
		public Group getGroup() { return cGroup; }

		//Prim0
		public RuleCall getPrim0ParserRuleCall_0() { return cPrim0ParserRuleCall_0; }

		//({Add0.left=current} "+" right=Prim0)*
		public Group getGroup_1() { return cGroup_1; }

		//{Add0.left=current}
		public Action getAdd0LeftAction_1_0() { return cAdd0LeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=Prim0
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Prim0
		public RuleCall getRightPrim0ParserRuleCall_1_2_0() { return cRightPrim0ParserRuleCall_1_2_0; }
	}

	public class Prim0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prim0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVal0Action_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Prim0 returns Exp0:
		//	{Val0} name=ID;
		public ParserRule getRule() { return rule; }

		//{Val0} name=ID
		public Group getGroup() { return cGroup; }

		//{Val0}
		public Action getVal0Action_0() { return cVal0Action_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class Exp1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitThreeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAddition1ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Exp1:
		//	"#3" Addition1;
		public ParserRule getRule() { return rule; }

		//"#3" Addition1
		public Group getGroup() { return cGroup; }

		//"#3"
		public Keyword getNumberSignDigitThreeKeyword_0() { return cNumberSignDigitThreeKeyword_0; }

		//Addition1
		public RuleCall getAddition1ParserRuleCall_1() { return cAddition1ParserRuleCall_1; }
	}

	public class Addition1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrim1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdd1LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrim1ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition1 returns Exp1:
		//	Prim1 ({Add1.left=current} "+" right=Prim1)*;
		public ParserRule getRule() { return rule; }

		//Prim1 ({Add1.left=current} "+" right=Prim1)*
		public Group getGroup() { return cGroup; }

		//Prim1
		public RuleCall getPrim1ParserRuleCall_0() { return cPrim1ParserRuleCall_0; }

		//({Add1.left=current} "+" right=Prim1)*
		public Group getGroup_1() { return cGroup_1; }

		//{Add1.left=current}
		public Action getAdd1LeftAction_1_0() { return cAdd1LeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=Prim1
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Prim1
		public RuleCall getRightPrim1ParserRuleCall_1_2_0() { return cRightPrim1ParserRuleCall_1_2_0; }
	}

	public class Prim1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prim1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVal1Action_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAddition1ParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Prim1 returns Exp1:
		//	{Val1} name=ID | "(" Addition1 ")";
		public ParserRule getRule() { return rule; }

		//{Val1} name=ID | "(" Addition1 ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Val1} name=ID
		public Group getGroup_0() { return cGroup_0; }

		//{Val1}
		public Action getVal1Action_0_0() { return cVal1Action_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"(" Addition1 ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Addition1
		public RuleCall getAddition1ParserRuleCall_1_1() { return cAddition1ParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class Exp2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitFourKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAddition2ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Exp2:
		//	"#4" Addition2;
		public ParserRule getRule() { return rule; }

		//"#4" Addition2
		public Group getGroup() { return cGroup; }

		//"#4"
		public Keyword getNumberSignDigitFourKeyword_0() { return cNumberSignDigitFourKeyword_0; }

		//Addition2
		public RuleCall getAddition2ParserRuleCall_1() { return cAddition2ParserRuleCall_1; }
	}

	public class Addition2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplication2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdd2LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplication2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition2 returns Exp2:
		//	Multiplication2 ({Add2.left=current} "+" right=Multiplication2)*;
		public ParserRule getRule() { return rule; }

		//Multiplication2 ({Add2.left=current} "+" right=Multiplication2)*
		public Group getGroup() { return cGroup; }

		//Multiplication2
		public RuleCall getMultiplication2ParserRuleCall_0() { return cMultiplication2ParserRuleCall_0; }

		//({Add2.left=current} "+" right=Multiplication2)*
		public Group getGroup_1() { return cGroup_1; }

		//{Add2.left=current}
		public Action getAdd2LeftAction_1_0() { return cAdd2LeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=Multiplication2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Multiplication2
		public RuleCall getRightMultiplication2ParserRuleCall_1_2_0() { return cRightMultiplication2ParserRuleCall_1_2_0; }
	}

	public class Multiplication2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrim2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMult2LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrim2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication2 returns Exp2:
		//	Prim2 ({Mult2.left=current} "*" right=Prim2)*;
		public ParserRule getRule() { return rule; }

		//Prim2 ({Mult2.left=current} "*" right=Prim2)*
		public Group getGroup() { return cGroup; }

		//Prim2
		public RuleCall getPrim2ParserRuleCall_0() { return cPrim2ParserRuleCall_0; }

		//({Mult2.left=current} "*" right=Prim2)*
		public Group getGroup_1() { return cGroup_1; }

		//{Mult2.left=current}
		public Action getMult2LeftAction_1_0() { return cMult2LeftAction_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//right=Prim2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Prim2
		public RuleCall getRightPrim2ParserRuleCall_1_2_0() { return cRightPrim2ParserRuleCall_1_2_0; }
	}

	public class Prim2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prim2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVal2Action_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAddition2ParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Prim2 returns Exp2:
		//	{Val2} name=ID | "(" Addition2 ")";
		public ParserRule getRule() { return rule; }

		//{Val2} name=ID | "(" Addition2 ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Val2} name=ID
		public Group getGroup_0() { return cGroup_0; }

		//{Val2}
		public Action getVal2Action_0_0() { return cVal2Action_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"(" Addition2 ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Addition2
		public RuleCall getAddition2ParserRuleCall_1_1() { return cAddition2ParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class DatatypeIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatatypeID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DatatypeID:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class SingleCrossReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleCrossReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitFiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameTerminalIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cKw1Keyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRef1Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRef1SingleCrossReferenceCrossReference_2_1_0 = (CrossReference)cRef1Assignment_2_1.eContents().get(0);
		private final RuleCall cRef1SingleCrossReferenceTerminalIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRef1SingleCrossReferenceCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cKw2Keyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRef2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRef2SingleCrossReferenceCrossReference_3_1_0 = (CrossReference)cRef2Assignment_3_1.eContents().get(0);
		private final RuleCall cRef2SingleCrossReferenceDatatypeIDParserRuleCall_3_1_0_1 = (RuleCall)cRef2SingleCrossReferenceCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cKw3Keyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRef3Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRef3SingleCrossReferenceCrossReference_4_1_0 = (CrossReference)cRef3Assignment_4_1.eContents().get(0);
		private final RuleCall cRef3SingleCrossReferenceIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRef3SingleCrossReferenceCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cKw4Keyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRef4Assignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cRef4SingleCrossReferenceCrossReference_5_1_0 = (CrossReference)cRef4Assignment_5_1.eContents().get(0);
		private final RuleCall cRef4SingleCrossReferenceIDTerminalRuleCall_5_1_0_1 = (RuleCall)cRef4SingleCrossReferenceCrossReference_5_1_0.eContents().get(1);
		
		//SingleCrossReference:
		//	"#5" name=(TerminalID | ID) ("kw1" ref1=[SingleCrossReference|TerminalID])? ("kw2"
		//	ref2=[SingleCrossReference|DatatypeID])? ("kw3" ref3=[SingleCrossReference])? ("kw4" ref4=[SingleCrossReference])?;
		public ParserRule getRule() { return rule; }

		//"#5" name=(TerminalID | ID) ("kw1" ref1=[SingleCrossReference|TerminalID])? ("kw2"
		//ref2=[SingleCrossReference|DatatypeID])? ("kw3" ref3=[SingleCrossReference])? ("kw4" ref4=[SingleCrossReference])?
		public Group getGroup() { return cGroup; }

		//"#5"
		public Keyword getNumberSignDigitFiveKeyword_0() { return cNumberSignDigitFiveKeyword_0; }

		//name=(TerminalID | ID)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//TerminalID | ID
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//TerminalID
		public RuleCall getNameTerminalIDTerminalRuleCall_1_0_0() { return cNameTerminalIDTerminalRuleCall_1_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_1() { return cNameIDTerminalRuleCall_1_0_1; }

		//("kw1" ref1=[SingleCrossReference|TerminalID])?
		public Group getGroup_2() { return cGroup_2; }

		//"kw1"
		public Keyword getKw1Keyword_2_0() { return cKw1Keyword_2_0; }

		//ref1=[SingleCrossReference|TerminalID]
		public Assignment getRef1Assignment_2_1() { return cRef1Assignment_2_1; }

		//[SingleCrossReference|TerminalID]
		public CrossReference getRef1SingleCrossReferenceCrossReference_2_1_0() { return cRef1SingleCrossReferenceCrossReference_2_1_0; }

		//TerminalID
		public RuleCall getRef1SingleCrossReferenceTerminalIDTerminalRuleCall_2_1_0_1() { return cRef1SingleCrossReferenceTerminalIDTerminalRuleCall_2_1_0_1; }

		//("kw2" ref2=[SingleCrossReference|DatatypeID])?
		public Group getGroup_3() { return cGroup_3; }

		//"kw2"
		public Keyword getKw2Keyword_3_0() { return cKw2Keyword_3_0; }

		//ref2=[SingleCrossReference|DatatypeID]
		public Assignment getRef2Assignment_3_1() { return cRef2Assignment_3_1; }

		//[SingleCrossReference|DatatypeID]
		public CrossReference getRef2SingleCrossReferenceCrossReference_3_1_0() { return cRef2SingleCrossReferenceCrossReference_3_1_0; }

		//DatatypeID
		public RuleCall getRef2SingleCrossReferenceDatatypeIDParserRuleCall_3_1_0_1() { return cRef2SingleCrossReferenceDatatypeIDParserRuleCall_3_1_0_1; }

		//("kw3" ref3=[SingleCrossReference])?
		public Group getGroup_4() { return cGroup_4; }

		//"kw3"
		public Keyword getKw3Keyword_4_0() { return cKw3Keyword_4_0; }

		//ref3=[SingleCrossReference]
		public Assignment getRef3Assignment_4_1() { return cRef3Assignment_4_1; }

		//[SingleCrossReference]
		public CrossReference getRef3SingleCrossReferenceCrossReference_4_1_0() { return cRef3SingleCrossReferenceCrossReference_4_1_0; }

		//ID
		public RuleCall getRef3SingleCrossReferenceIDTerminalRuleCall_4_1_0_1() { return cRef3SingleCrossReferenceIDTerminalRuleCall_4_1_0_1; }

		//("kw4" ref4=[SingleCrossReference])?
		public Group getGroup_5() { return cGroup_5; }

		//"kw4"
		public Keyword getKw4Keyword_5_0() { return cKw4Keyword_5_0; }

		//ref4=[SingleCrossReference]
		public Assignment getRef4Assignment_5_1() { return cRef4Assignment_5_1; }

		//[SingleCrossReference]
		public CrossReference getRef4SingleCrossReferenceCrossReference_5_1_0() { return cRef4SingleCrossReferenceCrossReference_5_1_0; }

		//ID
		public RuleCall getRef4SingleCrossReferenceIDTerminalRuleCall_5_1_0_1() { return cRef4SingleCrossReferenceIDTerminalRuleCall_5_1_0_1; }
	}

	public class BooleanAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitSixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoolBooleanAlternativeLiteralParserRuleCall_1_0 = (RuleCall)cBoolAssignment_1.eContents().get(0);
		
		//BooleanAlternative:
		//	"#6" bool=BooleanAlternativeLiteral;
		public ParserRule getRule() { return rule; }

		//"#6" bool=BooleanAlternativeLiteral
		public Group getGroup() { return cGroup; }

		//"#6"
		public Keyword getNumberSignDigitSixKeyword_0() { return cNumberSignDigitSixKeyword_0; }

		//bool=BooleanAlternativeLiteral
		public Assignment getBoolAssignment_1() { return cBoolAssignment_1; }

		//BooleanAlternativeLiteral
		public RuleCall getBoolBooleanAlternativeLiteralParserRuleCall_1_0() { return cBoolBooleanAlternativeLiteralParserRuleCall_1_0; }
	}

	public class BooleanAlternativeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanAlternativeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanAlternativeLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cKw1Keyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueKw2Keyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		//BooleanAlternativeLiteral:
		//	{BooleanAlternativeLiteral} ("kw1" | isTrue?="kw2");
		public ParserRule getRule() { return rule; }

		//{BooleanAlternativeLiteral} ("kw1" | isTrue?="kw2")
		public Group getGroup() { return cGroup; }

		//{BooleanAlternativeLiteral}
		public Action getBooleanAlternativeLiteralAction_0() { return cBooleanAlternativeLiteralAction_0; }

		//"kw1" | isTrue?="kw2"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"kw1"
		public Keyword getKw1Keyword_1_0() { return cKw1Keyword_1_0; }

		//isTrue?="kw2"
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//"kw2"
		public Keyword getIsTrueKw2Keyword_1_1_0() { return cIsTrueKw2Keyword_1_1_0; }
	}

	public class UnassignedDatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnassignedDatatype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitSevenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValIDTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		private final RuleCall cKW1ParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//UnassignedDatatype:
		//	"#7" val=ID KW1;
		public ParserRule getRule() { return rule; }

		//"#7" val=ID KW1
		public Group getGroup() { return cGroup; }

		//"#7"
		public Keyword getNumberSignDigitSevenKeyword_0() { return cNumberSignDigitSevenKeyword_0; }

		//val=ID
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//ID
		public RuleCall getValIDTerminalRuleCall_1_0() { return cValIDTerminalRuleCall_1_0; }

		//KW1
		public RuleCall getKW1ParserRuleCall_2() { return cKW1ParserRuleCall_2; }
	}

	public class KW1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KW1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cKw1Keyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cMatchedKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//KW1:
		//	"kw1" | "matched" INT?;
		public ParserRule getRule() { return rule; }

		//"kw1" | "matched" INT?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"kw1"
		public Keyword getKw1Keyword_0() { return cKw1Keyword_0; }

		//"matched" INT?
		public Group getGroup_1() { return cGroup_1; }

		//"matched"
		public Keyword getMatchedKeyword_1_0() { return cMatchedKeyword_1_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class OptionalSingleTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalSingleTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitEightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cKW1ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValIDTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//OptionalSingleTransition:
		//	"#8" KW1? val=ID;
		public ParserRule getRule() { return rule; }

		//"#8" KW1? val=ID
		public Group getGroup() { return cGroup; }

		//"#8"
		public Keyword getNumberSignDigitEightKeyword_0() { return cNumberSignDigitEightKeyword_0; }

		//KW1?
		public RuleCall getKW1ParserRuleCall_1() { return cKW1ParserRuleCall_1; }

		//val=ID
		public Assignment getValAssignment_2() { return cValAssignment_2; }

		//ID
		public RuleCall getValIDTerminalRuleCall_2_0() { return cValIDTerminalRuleCall_2_0; }
	}

	public class OptionalManyTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalManyTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitNineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cKW1ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValIDTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//OptionalManyTransition:
		//	"#9" KW1* val=ID;
		public ParserRule getRule() { return rule; }

		//"#9" KW1* val=ID
		public Group getGroup() { return cGroup; }

		//"#9"
		public Keyword getNumberSignDigitNineKeyword_0() { return cNumberSignDigitNineKeyword_0; }

		//KW1*
		public RuleCall getKW1ParserRuleCall_1() { return cKW1ParserRuleCall_1; }

		//val=ID
		public Assignment getValAssignment_2() { return cValAssignment_2; }

		//ID
		public RuleCall getValIDTerminalRuleCall_2_0() { return cValIDTerminalRuleCall_2_0; }
	}

	public class MandatoryManyTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MandatoryManyTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitZeroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cKW1ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValIDTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//MandatoryManyTransition:
		//	"#10" KW1+ val=ID;
		public ParserRule getRule() { return rule; }

		//"#10" KW1+ val=ID
		public Group getGroup() { return cGroup; }

		//"#10"
		public Keyword getNumberSignDigitOneDigitZeroKeyword_0() { return cNumberSignDigitOneDigitZeroKeyword_0; }

		//KW1+
		public RuleCall getKW1ParserRuleCall_1() { return cKW1ParserRuleCall_1; }

		//val=ID
		public Assignment getValAssignment_2() { return cValAssignment_2; }

		//ID
		public RuleCall getValIDTerminalRuleCall_2_0() { return cValIDTerminalRuleCall_2_0; }
	}

	public class AlternativeTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlternativeTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignDigitOneDigitOneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cKW1ParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cKw2Keyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValIDTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//AlternativeTransition:
		//	"#11" (KW1 | "kw2") val=ID;
		public ParserRule getRule() { return rule; }

		//"#11" (KW1 | "kw2") val=ID
		public Group getGroup() { return cGroup; }

		//"#11"
		public Keyword getNumberSignDigitOneDigitOneKeyword_0() { return cNumberSignDigitOneDigitOneKeyword_0; }

		//KW1 | "kw2"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//KW1
		public RuleCall getKW1ParserRuleCall_1_0() { return cKW1ParserRuleCall_1_0; }

		//"kw2"
		public Keyword getKw2Keyword_1_1() { return cKw2Keyword_1_1; }

		//val=ID
		public Assignment getValAssignment_2() { return cValAssignment_2; }

		//ID
		public RuleCall getValIDTerminalRuleCall_2_0() { return cValIDTerminalRuleCall_2_0; }
	}
	
	
	private ModelElements pModel;
	private MandatoryKeywordsElements pMandatoryKeywords;
	private Exp0Elements pExp0;
	private Addition0Elements pAddition0;
	private Prim0Elements pPrim0;
	private Exp1Elements pExp1;
	private Addition1Elements pAddition1;
	private Prim1Elements pPrim1;
	private Exp2Elements pExp2;
	private Addition2Elements pAddition2;
	private Multiplication2Elements pMultiplication2;
	private Prim2Elements pPrim2;
	private TerminalRule tTerminalID;
	private DatatypeIDElements pDatatypeID;
	private SingleCrossReferenceElements pSingleCrossReference;
	private BooleanAlternativeElements pBooleanAlternative;
	private BooleanAlternativeLiteralElements pBooleanAlternativeLiteral;
	private UnassignedDatatypeElements pUnassignedDatatype;
	private KW1Elements pKW1;
	private OptionalSingleTransitionElements pOptionalSingleTransition;
	private OptionalManyTransitionElements pOptionalManyTransition;
	private MandatoryManyTransitionElements pMandatoryManyTransition;
	private AlternativeTransitionElements pAlternativeTransition;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SyntacticSequencerTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	x1=MandatoryKeywords | x2=Exp0 | x3=Exp1 | x4=Exp2 | x5=SingleCrossReference | x6=BooleanAlternative |
	//	x7=UnassignedDatatype | x8=OptionalSingleTransition | x9=OptionalManyTransition | x10=MandatoryManyTransition |
	//	x11=AlternativeTransition;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//MandatoryKeywords:
	//	"#1" val1=ID "kw1" val2=ID "kw2" "kw3" val3=ID "kw4";
	public MandatoryKeywordsElements getMandatoryKeywordsAccess() {
		return (pMandatoryKeywords != null) ? pMandatoryKeywords : (pMandatoryKeywords = new MandatoryKeywordsElements());
	}
	
	public ParserRule getMandatoryKeywordsRule() {
		return getMandatoryKeywordsAccess().getRule();
	}

	//Exp0:
	//	"#2" Addition0;
	public Exp0Elements getExp0Access() {
		return (pExp0 != null) ? pExp0 : (pExp0 = new Exp0Elements());
	}
	
	public ParserRule getExp0Rule() {
		return getExp0Access().getRule();
	}

	//Addition0 returns Exp0:
	//	Prim0 ({Add0.left=current} "+" right=Prim0)*;
	public Addition0Elements getAddition0Access() {
		return (pAddition0 != null) ? pAddition0 : (pAddition0 = new Addition0Elements());
	}
	
	public ParserRule getAddition0Rule() {
		return getAddition0Access().getRule();
	}

	//Prim0 returns Exp0:
	//	{Val0} name=ID;
	public Prim0Elements getPrim0Access() {
		return (pPrim0 != null) ? pPrim0 : (pPrim0 = new Prim0Elements());
	}
	
	public ParserRule getPrim0Rule() {
		return getPrim0Access().getRule();
	}

	//Exp1:
	//	"#3" Addition1;
	public Exp1Elements getExp1Access() {
		return (pExp1 != null) ? pExp1 : (pExp1 = new Exp1Elements());
	}
	
	public ParserRule getExp1Rule() {
		return getExp1Access().getRule();
	}

	//Addition1 returns Exp1:
	//	Prim1 ({Add1.left=current} "+" right=Prim1)*;
	public Addition1Elements getAddition1Access() {
		return (pAddition1 != null) ? pAddition1 : (pAddition1 = new Addition1Elements());
	}
	
	public ParserRule getAddition1Rule() {
		return getAddition1Access().getRule();
	}

	//Prim1 returns Exp1:
	//	{Val1} name=ID | "(" Addition1 ")";
	public Prim1Elements getPrim1Access() {
		return (pPrim1 != null) ? pPrim1 : (pPrim1 = new Prim1Elements());
	}
	
	public ParserRule getPrim1Rule() {
		return getPrim1Access().getRule();
	}

	//Exp2:
	//	"#4" Addition2;
	public Exp2Elements getExp2Access() {
		return (pExp2 != null) ? pExp2 : (pExp2 = new Exp2Elements());
	}
	
	public ParserRule getExp2Rule() {
		return getExp2Access().getRule();
	}

	//Addition2 returns Exp2:
	//	Multiplication2 ({Add2.left=current} "+" right=Multiplication2)*;
	public Addition2Elements getAddition2Access() {
		return (pAddition2 != null) ? pAddition2 : (pAddition2 = new Addition2Elements());
	}
	
	public ParserRule getAddition2Rule() {
		return getAddition2Access().getRule();
	}

	//Multiplication2 returns Exp2:
	//	Prim2 ({Mult2.left=current} "*" right=Prim2)*;
	public Multiplication2Elements getMultiplication2Access() {
		return (pMultiplication2 != null) ? pMultiplication2 : (pMultiplication2 = new Multiplication2Elements());
	}
	
	public ParserRule getMultiplication2Rule() {
		return getMultiplication2Access().getRule();
	}

	//Prim2 returns Exp2:
	//	{Val2} name=ID | "(" Addition2 ")";
	public Prim2Elements getPrim2Access() {
		return (pPrim2 != null) ? pPrim2 : (pPrim2 = new Prim2Elements());
	}
	
	public ParserRule getPrim2Rule() {
		return getPrim2Access().getRule();
	}

	//terminal TerminalID:
	//	"$1" ID;
	public TerminalRule getTerminalIDRule() {
		return (tTerminalID != null) ? tTerminalID : (tTerminalID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalID"));
	} 

	//DatatypeID:
	//	ID;
	public DatatypeIDElements getDatatypeIDAccess() {
		return (pDatatypeID != null) ? pDatatypeID : (pDatatypeID = new DatatypeIDElements());
	}
	
	public ParserRule getDatatypeIDRule() {
		return getDatatypeIDAccess().getRule();
	}

	//SingleCrossReference:
	//	"#5" name=(TerminalID | ID) ("kw1" ref1=[SingleCrossReference|TerminalID])? ("kw2"
	//	ref2=[SingleCrossReference|DatatypeID])? ("kw3" ref3=[SingleCrossReference])? ("kw4" ref4=[SingleCrossReference])?;
	public SingleCrossReferenceElements getSingleCrossReferenceAccess() {
		return (pSingleCrossReference != null) ? pSingleCrossReference : (pSingleCrossReference = new SingleCrossReferenceElements());
	}
	
	public ParserRule getSingleCrossReferenceRule() {
		return getSingleCrossReferenceAccess().getRule();
	}

	//BooleanAlternative:
	//	"#6" bool=BooleanAlternativeLiteral;
	public BooleanAlternativeElements getBooleanAlternativeAccess() {
		return (pBooleanAlternative != null) ? pBooleanAlternative : (pBooleanAlternative = new BooleanAlternativeElements());
	}
	
	public ParserRule getBooleanAlternativeRule() {
		return getBooleanAlternativeAccess().getRule();
	}

	//BooleanAlternativeLiteral:
	//	{BooleanAlternativeLiteral} ("kw1" | isTrue?="kw2");
	public BooleanAlternativeLiteralElements getBooleanAlternativeLiteralAccess() {
		return (pBooleanAlternativeLiteral != null) ? pBooleanAlternativeLiteral : (pBooleanAlternativeLiteral = new BooleanAlternativeLiteralElements());
	}
	
	public ParserRule getBooleanAlternativeLiteralRule() {
		return getBooleanAlternativeLiteralAccess().getRule();
	}

	//UnassignedDatatype:
	//	"#7" val=ID KW1;
	public UnassignedDatatypeElements getUnassignedDatatypeAccess() {
		return (pUnassignedDatatype != null) ? pUnassignedDatatype : (pUnassignedDatatype = new UnassignedDatatypeElements());
	}
	
	public ParserRule getUnassignedDatatypeRule() {
		return getUnassignedDatatypeAccess().getRule();
	}

	//KW1:
	//	"kw1" | "matched" INT?;
	public KW1Elements getKW1Access() {
		return (pKW1 != null) ? pKW1 : (pKW1 = new KW1Elements());
	}
	
	public ParserRule getKW1Rule() {
		return getKW1Access().getRule();
	}

	//OptionalSingleTransition:
	//	"#8" KW1? val=ID;
	public OptionalSingleTransitionElements getOptionalSingleTransitionAccess() {
		return (pOptionalSingleTransition != null) ? pOptionalSingleTransition : (pOptionalSingleTransition = new OptionalSingleTransitionElements());
	}
	
	public ParserRule getOptionalSingleTransitionRule() {
		return getOptionalSingleTransitionAccess().getRule();
	}

	//OptionalManyTransition:
	//	"#9" KW1* val=ID;
	public OptionalManyTransitionElements getOptionalManyTransitionAccess() {
		return (pOptionalManyTransition != null) ? pOptionalManyTransition : (pOptionalManyTransition = new OptionalManyTransitionElements());
	}
	
	public ParserRule getOptionalManyTransitionRule() {
		return getOptionalManyTransitionAccess().getRule();
	}

	//MandatoryManyTransition:
	//	"#10" KW1+ val=ID;
	public MandatoryManyTransitionElements getMandatoryManyTransitionAccess() {
		return (pMandatoryManyTransition != null) ? pMandatoryManyTransition : (pMandatoryManyTransition = new MandatoryManyTransitionElements());
	}
	
	public ParserRule getMandatoryManyTransitionRule() {
		return getMandatoryManyTransitionAccess().getRule();
	}

	//AlternativeTransition:
	//	"#11" (KW1 | "kw2") val=ID;
	public AlternativeTransitionElements getAlternativeTransitionAccess() {
		return (pAlternativeTransition != null) ? pAlternativeTransition : (pAlternativeTransition = new AlternativeTransitionElements());
	}
	
	public ParserRule getAlternativeTransitionRule() {
		return getAlternativeTransitionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
