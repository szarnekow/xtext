<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.0"?>

<plugin>
	<extension-point id="wizardContribution" name="Wizard Contribution" schema="schema/org.eclipse.xtext.xtext.ui.wizardContribution.exsd"/>
	 <extension
            point="org.eclipse.ui.editors">
        <editor
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.XtextEditor"
            contributorClass="org.eclipse.ui.editors.text.TextEditorActionContributor"
            default="true"
            extensions="xtext,xtext2"
            id="org.eclipse.xtext.Xtext"
            name="%Xtext_Editor">
        </editor>
    </extension>
    <extension
        point="org.eclipse.ui.handlers">
        <handler
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.hyperlinking.OpenDeclarationHandler"
            commandId="org.eclipse.xtext.ui.editor.hyperlinking.OpenDeclaration">
            <activeWhen>
                <reference
                    definitionId="org.eclipse.xtext.Xtext.Editor.opened">
                </reference>
            </activeWhen>
        </handler>
        <handler
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.handler.ValidateActionHandler"
            commandId="org.eclipse.xtext.Xtext.validate">
         <activeWhen>
            <reference
                    definitionId="org.eclipse.xtext.Xtext.Editor.opened">
            </reference>
         </activeWhen>
      </handler>
    </extension>
    <extension point="org.eclipse.core.expressions.definitions">
        <definition id="org.eclipse.xtext.Xtext.Editor.opened">
            <and>
                <reference definitionId="isActiveEditorAnInstanceOfXtextEditor"/>
                <with variable="activeEditor">
                    <test property="org.eclipse.xtext.ui.editor.XtextEditor.languageName" 
                        value="org.eclipse.xtext.Xtext" 
                        forcePluginActivation="true"/>
                </with>        
            </and>
        </definition>
    </extension>
    <extension
            point="org.eclipse.ui.preferencePages">
        <page
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.preferences.LanguageRootPreferencePage"
            id="org.eclipse.xtext.Xtext"
            name="%Xtext_Language_Root_Preferences">
            <keywordReference id="org.eclipse.xtext.ui.keyword_Xtext"/>
        </page>
        <page
            category="org.eclipse.xtext.Xtext"
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.syntaxcoloring.SyntaxColoringPreferencePage"
            id="org.eclipse.xtext.Xtext.coloring"
            name="%Syntax_Coloring">
            <keywordReference id="org.eclipse.xtext.ui.keyword_Xtext"/>
        </page>
        <page
            category="org.eclipse.xtext.Xtext"
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.templates.XtextTemplatePreferencePage"
            id="org.eclipse.xtext.Xtext.templates"
            name="%Templates">
            <keywordReference id="org.eclipse.xtext.ui.keyword_Xtext"/>
        </page>
    </extension>
    <extension
        point="org.eclipse.ui.keywords">
        <keyword
            id="org.eclipse.xtext.ui.keyword_Xtext"
            label="%Xtext_keyword"/>
    </extension>
    <extension
         point="org.eclipse.ui.commands">
      <command
            description="Trigger expensive validation"
            id="org.eclipse.xtext.Xtext.validate"
            name="%Validate">
      </command>
    </extension>
    <extension point="org.eclipse.ui.menus">
        <menuContribution
            locationURI="popup:#TextEditorContext?after=group.edit">
             <command
                 commandId="org.eclipse.xtext.Xtext.validate"
                 style="push"
                 tooltip="%ExpensiveValidation">
            <visibleWhen checkEnabled="false">
                <reference
                    definitionId="org.eclipse.xtext.Xtext.Editor.opened">
                </reference>
            </visibleWhen>
         </command>  
         </menuContribution>
    </extension>
    <extension point="org.eclipse.ui.menus">
		<menuContribution locationURI="popup:#TextEditorContext?endof=group.find">
			<command commandId="org.eclipse.xtext.ui.editor.FindReferences">
				<visibleWhen checkEnabled="false">
                	<reference definitionId="org.eclipse.xtext.Xtext.Editor.opened">
                	</reference>
            	</visibleWhen>
			</command>
		</menuContribution>
	</extension>
	<extension point="org.eclipse.ui.handlers">
	    <handler
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.findrefs.FindReferencesHandler"
            commandId="org.eclipse.xtext.ui.editor.FindReferences">
            <activeWhen>
                <reference
                    definitionId="org.eclipse.xtext.Xtext.Editor.opened">
                </reference>
            </activeWhen>
        </handler>
    </extension>   

<!-- adding resource factories -->

	<extension
		point="org.eclipse.emf.ecore.extension_parser">
		<parser
			class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.resource.IResourceFactory"
			type="xtext">
		</parser>
	</extension>
	<extension point="org.eclipse.xtext.extension_resourceServiceProvider">
        <resourceServiceProvider
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.resource.IResourceUIServiceProvider"
            uriExtension="xtext">
        </resourceServiceProvider>
    </extension>

	<extension
		point="org.eclipse.emf.ecore.extension_parser">
		<parser
			class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.resource.IResourceFactory"
			type="xtext2">
		</parser>
	</extension>
	<extension point="org.eclipse.xtext.extension_resourceServiceProvider">
        <resourceServiceProvider
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.resource.IResourceUIServiceProvider"
            uriExtension="xtext2">
        </resourceServiceProvider>
    </extension>

	<!-- Wizards -->
	<extension
		point="org.eclipse.ui.newWizards">
		<category
			name="%Xtext_Wizard_Category"
			id="org.eclipse.xtext.projectwiz">
		</category>
		<wizard
			category="org.eclipse.xtext.projectwiz"
			class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.xtext.ui.wizard.project.NewXtextProjectWizard"
			icon="icons/editor.gif"
			id="org.eclipse.xtext.xtext.ui.wizard.project.NewXtextProjectWizard"
			name="%Xtext_Project"
			project="true">
			<description>
            	%NewXtext_Project.description
         	</description>
		</wizard>
		<wizard
			category="org.eclipse.xtext.projectwiz"
			class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.xtext.ui.wizard.ecore2xtext.NewXtextProjectFromEcoreWizard"
			icon="icons/editor.gif"
			id="org.eclipse.xtext.xtext.ui.wizard.ecore2xtext.NewXtextProjectFromEcoreWizard"
			name="%Xtext_Project_From_Ecore"
			project="true">
			<description>
            	%NewXtext_Project_From_Ecore.description
         	</description>
		</wizard>
	</extension>
	
	<extension
         point="org.eclipse.xtext.xtext.ui.wizardContribution">
      <generatorConfiguration name="Use Stable API only" sortKey="2">
         <MweSnippet>
<![CDATA[
	bean = StandaloneSetup {
	    scanClassPath = true
		platformUri = "${runtimeProject}/.."
		// registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
        // registerGenModelFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
        // registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
        // registerGeneratedEPackage = "org.eclipse.xtext.common.types.TypesPackage"
        
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages 
			fragment = ecore.EcoreGeneratorFragment {
			}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
			//  options = {
			//		backtrack = true
			//	}
			}
			
			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment {}
			// fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}

			// generator API
			fragment = generator.GeneratorFragment {
				generateMwe = true
				generateJavaMain = true
			}
			
			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}

			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			
			// generates a more lightweight Antlr parser and lexer tailored for content assist  
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment {}

			// project wizard (optional) 
			// fragment = projectWizard.SimpleProjectWizardFragment {
			// 		generatorProjectName = "${projectName}"
			//		modelFileExtension = file.extensions
			// }

			// provides the necessary bindings for java types integration
			fragment = types.TypesGeneratorFragment {}

			// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XbaseGeneratorFragment {}
			
			// provides a preference page for template proposals 
			fragment = templates.CodetemplatesGeneratorFragment {}

			// rename refactoring
            // fragment = refactoring.RefactorElementNameFragment {}

            // provides a compare view
            // fragment = compare.CompareFragment {
            //    fileExtensions = file.extensions
            // }

            // Serializer 2.0
            // fragment = serializer.SerializerFragment {}
		}
	}]]>
         </MweSnippet>
      </generatorConfiguration>
   </extension>

   <extension
         point="org.eclipse.xtext.xtext.ui.wizardContribution">
      <generatorConfiguration name="Use Provisional API (Compare,Refactoring and new Serializer)" sortKey="1">
        <MweSnippet>
<![CDATA[
    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."
        // The following two lines can be removed, if Xbase is not used.
        registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
        registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ui/src-gen"
    }

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        pathTestProject = "${runtimeProject}.tests"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
        language = {
            uri = grammarURI
            fileExtensions = file.extensions

            // Java API to access grammar elements (required by several other fragments)
            fragment = grammarAccess.GrammarAccessFragment {}

            // generates Java API for the generated EPackages
            fragment = ecore.EcoreGeneratorFragment {
            // referencedGenModels = "
            //  platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel,
            //  platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel
            // "
            }

            // Serializer 2.0
            fragment = serializer.SerializerFragment {
            	generateStub = false
            }
            
            // the serialization component (1.0)
            // fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

            // a custom ResourceFactory for use with EMF
            fragment = resourceFactory.ResourceFactoryFragment {
                fileExtensions = file.extensions
            }

            // The antlr parser generator fragment.
            fragment = parser.antlr.XtextAntlrGeneratorFragment {
            //  options = {
            //      backtrack = true
            //  }
            }

            // java-based API for validation
            fragment = validation.JavaValidatorFragment {
            //    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
            //    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }

            // scoping and exporting API
            // fragment = scoping.ImportURIScopingFragment {}
            // fragment = exporting.SimpleNamesFragment {}

            // scoping and exporting API
            fragment = scoping.ImportNamespacesScopingFragment {}
            fragment = exporting.QualifiedNamesFragment {}
            fragment = builder.BuilderIntegrationFragment {}

            // generator API
            fragment = generator.GeneratorFragment {
                generateMwe = false
                generateJavaMain = false
            }

            // formatter API
            fragment = formatting.FormatterFragment {}

            // labeling API
            fragment = labeling.LabelProviderFragment {}

            // outline API
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}

            // quickfix API
            fragment = quickfix.QuickfixProviderFragment {}

            // content assist API
            fragment = contentAssist.JavaBasedContentAssistFragment {}

            // generates a more lightweight Antlr parser and lexer tailored for content assist
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

            // generates junit test support classes into Generator#pathTestProject
            fragment = junit.Junit4Fragment {}

            // project wizard (optional)
            // fragment = projectWizard.SimpleProjectWizardFragment {
            //      generatorProjectName = "${projectName}"
            //      modelFileExtension = file.extensions
            // }

            // rename refactoring
            fragment = refactoring.RefactorElementNameFragment {}

            // provides the necessary bindings for java types integration
            fragment = types.TypesGeneratorFragment {}

            // generates the required bindings only if the grammar inherits from Xbase
            fragment = xbase.XbaseGeneratorFragment {}

            // provides a preference page for template proposals
            fragment = templates.CodetemplatesGeneratorFragment {}

            // provides a compare view
            fragment = compare.CompareFragment {
                 fileExtensions = file.extensions
            }

        }
    }]]>
         </MweSnippet>
      </generatorConfiguration>
   </extension>
   <extension
         point="org.eclipse.debug.ui.launchShortcuts">
      <shortcut
            category="org.eclipse.ui.externaltools"
            class="org.eclipse.xtext.xtext.launcher.GenerateArtifactsLaunchShortcut"
            icon="icons/launch.gif"
            id="org.eclipse.xtext.xtext.launcher.GenerateArtifactsLaunchShortcut"
            label="%shortcut.label"
            modes="run, debug">
        <contextualLaunch>
           <enablement>
             <with variable="selection">
				<iterate>
					<and>
						<adapt type="org.eclipse.core.resources.IResource">
							<test property="org.eclipse.core.resources.name" value="*.xtext"/>
						</adapt>							
						<test property="org.eclipse.xtext.xtext.launcher.workflowavailable" />
					</and>
				</iterate>
			</with>
           </enablement>
           <contextLabel
              mode="run"
              label="%contextLabel.run.label"/>
          <contextLabel
              mode="debug"
              label="%contextLabel.debug.label"/>
         </contextualLaunch>
      </shortcut>
   </extension>
   <extension
         point="org.eclipse.core.expressions.propertyTesters">
      <propertyTester
            class="org.eclipse.xtext.xtext.launcher.WorkflowPropertyTester"
            id="org.eclipse.xtext.xtext.launcher.WorkflowPropertyTester"
            namespace="org.eclipse.xtext.xtext.launcher"
            properties="workflowavailable"
            type="java.lang.Object">
      </propertyTester>
   </extension>
	<!-- Quick Outline -->
	<extension
		point="org.eclipse.ui.handlers">
		<handler 
			class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.outline.quickoutline.ShowQuickOutlineActionHandler"
			commandId="org.eclipse.xtext.ui.editor.outline.QuickOutline">
			<activeWhen>
				<reference
					definitionId="org.eclipse.xtext.Xtext.Editor.opened">
				</reference>
			</activeWhen>
		</handler>
	</extension>
	<extension
		point="org.eclipse.ui.commands">
		<command
			description="Open the quick outline."
			id="org.eclipse.xtext.ui.editor.outline.QuickOutline"
			name="%QuickOutline">
		</command>
	</extension>
	<extension point="org.eclipse.ui.menus">
		<menuContribution
			locationURI="popup:#TextEditorContext?after=group.open">
			<command commandId="org.eclipse.xtext.ui.editor.outline.QuickOutline"
				style="push"
				tooltip="%QuickOutline_tooltip">
				<visibleWhen checkEnabled="false">
					<reference definitionId="org.eclipse.xtext.Xtext.Editor.opened"/>
				</visibleWhen>
			</command>
		</menuContribution>
	</extension>
	
  <extension point="org.eclipse.compare.contentViewers">
    <viewer id="org.eclipse.xtext.Xtext.compare.contentViewers"
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.compare.InjectableViewerCreator"
            extensions="xtext,xtext2">
    </viewer>
  </extension>
  <extension point="org.eclipse.compare.contentMergeViewers">
    <viewer id="org.eclipse.xtext.Xtext.compare.contentMergeViewers"
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.compare.InjectableViewerCreator"
            extensions="xtext,xtext2" label="Xtext Compare">
     </viewer>
  </extension>
  <extension point="org.eclipse.ui.editors.documentProviders">
    <provider id="org.eclipse.xtext.Xtext.editors.documentProviders"
            class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.editor.model.XtextDocumentProvider"
            extensions="xtext,xtext2">
    </provider>
  </extension>
   	<!-- Rename Refactoring -->
	<extension point="org.eclipse.ui.handlers">
		<handler 
			class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.ui.refactoring.ui.IRenameElementHandler"
			commandId="org.eclipse.xtext.ui.refactoring.RenameElement">
			<activeWhen>
				<reference
					definitionId="org.eclipse.xtext.Xtext.Editor.opened">
				</reference>
			</activeWhen>
		</handler>
	</extension>
    <extension point="org.eclipse.ui.menus">
         <menuContribution
            locationURI="popup:#TextEditorContext?after=group.edit">
         <command commandId="org.eclipse.xtext.ui.refactoring.RenameElement"
               style="push">
            <visibleWhen checkEnabled="false">
               <reference
                     definitionId="org.eclipse.xtext.Xtext.Editor.opened">
               </reference>
            </visibleWhen>
         </command>
      </menuContribution>
   </extension>
    <extension
          point="org.eclipse.ltk.core.refactoring.renameParticipants">
       <renameParticipant
             class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.xtext.ui.refactoring.EcoreRefactoringParticipant"
             id="org.eclipse.xtext.xtext.ui.ecoreRenameParticipant"
             name="Ecore Rename Participant">
          <enablement>
             <with
                   variable="processorIdentifier">
                <equals
                      value="org.eclipse.xtext.Xtext.ui.refactoring.Processor"/>
             </with>
          </enablement>
       </renameParticipant>
       <renameParticipant
             class="org.eclipse.xtext.ui.XtextExecutableExtensionFactory:org.eclipse.xtext.xtext.ui.refactoring.OverridingRuleRefactoringParticipant"
             id="org.eclipse.xtext.xtext.ui.ecoreRenameParticipant"
             name="Ecore Rename Participant">
          <enablement>
             <with
                   variable="processorIdentifier">
                <equals
                      value="org.eclipse.xtext.Xtext.ui.refactoring.Processor"/>
             </with>
          </enablement>
       </renameParticipant>
    </extension>

</plugin>
