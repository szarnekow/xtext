/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
grammar org.eclipse.xtext.xbase.Xbase with org.eclipse.xtext.xbase.Xtype

import "http://www.eclipse.org/xtext/xbase/Xbase"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

XExpression returns XExpression :
	XAssignment;

XAssignment returns XExpression :
	{XAssignment} /* (declaringType=[types::JvmDeclaredType] '::')? */ feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign value=XAssignment |	
	XOrExpression (
		=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	)?;

OpSingleAssign:
	'='
;

OpMultiAssign:
	'+=';

XOrExpression returns XExpression:
	XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*;

OpOr:
	'||';

XAndExpression returns XExpression:
	XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XEqualityExpression)*;

OpAnd:
	'&&';

XEqualityExpression returns XExpression:
	XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	rightOperand=XRelationalExpression)*;

OpEquality:
	'==' | '!=';

XRelationalExpression returns XExpression:
	XOtherOperatorExpression
	(=>({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	 =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;

OpCompare:
	'>=' | '<=' | '>' | '<';

XOtherOperatorExpression returns XExpression:
	XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	rightOperand=XAdditiveExpression)*;

OpOther:
	'->' | '..';

XAdditiveExpression returns XExpression:
	XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	rightOperand=XMultiplicativeExpression)*;

OpAdd:
	'+' | '-';

XMultiplicativeExpression returns XExpression:
	XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]) rightOperand=XUnaryOperation)*;

OpMulti:
	'*' | '**' | '/' | '%';

XUnaryOperation returns XExpression:
	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression
	| XCastedExpression;

OpUnary:
	"!" | "-" | "+";
	
XCastedExpression returns XExpression:
	XMemberFeatureCall (=>({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
;

XMemberFeatureCall returns XExpression:
	XPrimaryExpression
	(=>({XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|spreading?="*.")) 
		('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
		feature=[types::JvmIdentifiableElement|ValidID] (
			=>explicitOperationCall?='(' 
				(
				    memberCallArguments+=XShortClosure
				  |	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
				)? 
			')')?
			=>memberCallArguments+=XClosure?
		)*;

XPrimaryExpression returns XExpression:
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XFeatureCall |
	XLiteral |
	XIfExpression |
	XForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression;

XLiteral returns XExpression:
	XClosure |
	XBooleanLiteral |
	XIntLiteral |
	XNullLiteral |
	XStringLiteral |
	XTypeLiteral
;

XClosure returns XExpression:
	{XClosure} 
	'[' 
		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
		expression=XExpressionInClosure 
	']';
	
XExpressionInClosure returns XExpression: 
	{XBlockExpression}
	(expressions+=XExpressionInsideBlock ';'?)*
;

XShortClosure returns XExpression:
	=>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;

XParenthesizedExpression returns XExpression:
	'(' XExpression ')';

XIfExpression returns XExpression:
	{XIfExpression}
	'if' '(' if=XExpression ')'
	then=XExpression
	(=>'else' else=XExpression)?;

XSwitchExpression returns XExpression:
	{XSwitchExpression}
	'switch' =>(localVarName=ValidID ':')? switch=XExpression '{'
	(cases+=XCasePart)+
	('default' ':' default=XExpression )?
	'}';

XCasePart:
	typeGuard=JvmTypeReference? ('case' case=XExpression)? 
		':' then=XExpression ;

XForLoopExpression returns XExpression:
	{XForLoopExpression}
	'for' '(' declaredParam=JvmFormalParameter ':' forExpression=XExpression ')'
		eachExpression=XExpression;

XWhileExpression returns XExpression:
	{XWhileExpression}
	'while' '(' predicate=XExpression ')'
		body=XExpression;
	
XDoWhileExpression returns XExpression:
	{XDoWhileExpression}
   'do'
       body=XExpression
   'while' '(' predicate=XExpression ')';

XBlockExpression returns XExpression: 
	{XBlockExpression}
	'{'
		(expressions+=XExpressionInsideBlock ';'?)*
	'}';

XExpressionInsideBlock returns XExpression:
	XVariableDeclaration | XExpression;

XVariableDeclaration returns XExpression:
	{XVariableDeclaration}
	(writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;

JvmFormalParameter returns types::JvmFormalParameter:
	(parameterType=JvmTypeReference)? name=ValidID;
	
FullJvmFormalParameter returns types::JvmFormalParameter:
	parameterType=JvmTypeReference name=ValidID;

XFeatureCall returns XExpression:
	{XFeatureCall}
	(declaringType=[types::JvmDeclaredType|StaticQualifier])?
	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? 
	feature=[types::JvmIdentifiableElement|IdOrSuper] 
	(=>explicitOperationCall?='(' 
		(
		    featureCallArguments+=XShortClosure
		  |	featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		)? 
	')')?
	=>featureCallArguments+=XClosure?;
	
IdOrSuper :
	ValidID | 'super'
;
	
// This is a workaround since ANTLR will not be able to resolve
// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
// Make sure to change the value converter if you change the syntax of the StaticQualifier
StaticQualifier:
	(ValidID '::')+
;

XConstructorCall returns XExpression:
	{XConstructorCall}
	'new' constructor=[types::JvmConstructor|QualifiedName] 
	('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	'(' 
		(
		    arguments+=XShortClosure
		  |	arguments+=XExpression (',' arguments+=XExpression)*
		)? 
	')'
	=>arguments+=XClosure?;

XBooleanLiteral returns XExpression :
	{XBooleanLiteral} ('false' | isTrue?='true');

XNullLiteral returns XExpression :
	{XNullLiteral} 'null';

XIntLiteral returns XExpression :
	{XIntLiteral} value=INT;

XStringLiteral returns XExpression:
	{XStringLiteral} value=STRING;

XTypeLiteral returns XExpression :
	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] ')'
;

XThrowExpression returns XExpression :
	{XThrowExpression} 'throw' expression=XExpression;
	
XReturnExpression returns XExpression :
	{XReturnExpression} 'return' (=>expression=XExpression)?;
	
XTryCatchFinallyExpression returns XExpression:
	{XTryCatchFinallyExpression}
	'try' 
		expression=XExpression
	(
		catchClauses+=XCatchClause+
		(=>'finally' finallyExpression=XExpression)?
	|	'finally' finallyExpression=XExpression
	);
	
XCatchClause :
	=>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;


QualifiedName:
  ValidID (=>'.' ValidID)*;