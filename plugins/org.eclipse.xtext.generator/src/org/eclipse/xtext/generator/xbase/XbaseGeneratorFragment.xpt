«REM»
/*******************************************************************************
 * Copyright (c) 2011 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::GrammarUtil»
«EXTENSION org::eclipse::xtext::generator::xbase::XbaseGeneratorFragment»
«EXTENSION org::eclipse::xtext::generator::GenModelAccess»

«DEFINE generate(Boolean useInferredJvmModel, Boolean generateXtendInferrer, Boolean jdtTypeHierarchy) FOR Grammar»
«IF generateXtendInferrer»
«FILE getJvmModelInferrerName().asPath()+".xtend" SRC-»
package «getJvmModelInferrerName().toJavaPackage()»
 
import com.google.inject.Inject
import org.eclipse.xtext.common.types.JvmDeclaredType
import org.eclipse.xtext.util.IAcceptor
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import «rules.first().type.classifier.javaTypeName(eResource().resourceSet)»

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class «getJvmModelInferrerName().toSimpleName()» extends AbstractModelInferrer {

    /**
     * conveninence API to build and initialize JvmTypes and their members.
     */
	@Inject extension JvmTypesBuilder

	/**
	 * Is called for each instance of the first argument's type contained in a resource.
	 * 
	 * @param element - the model to create one or more JvmDeclaredTypes from.
	 * @param acceptor - each created JvmDeclaredType without a container should be passed to the acceptor in order get attached to the
	 *                   current resource.
	 * @param isPreLinkingPhase - whether the method is called in a pre linking phase, i.e. when the global index isn't fully updated. You
	 *        must not rely on linking using the index if iPrelinkingPhase is <code>true</code>
	 */
   	def dispatch void infer(«rules.first().type.classifier.javaTypeName(eResource().resourceSet).toSimpleName()» element, IAcceptor<JvmDeclaredType> acceptor, boolean isPrelinkingPhase) {
   		
   		// Here you explain how your model is mapped to Java elements, by writing the actual translation code.
   		// An example based on the initial hellow world example could look like this:
   		
//   		acceptor.accept(element.toClass("my.company.greeting.MyGreetings") [
//   			for (greeting : element.greetings) {
//   				members += greeting.toMethod(greeting.name, greeting.newTypeRef(typeof(String))) [
//   					it.body ['''
//   						return "Hello «S()»greeting.name«E()»";
//   					''']
//   				]
//   			}
//   		])
   	}
}
«ENDFILE»
«ENDIF»
«ENDDEFINE»

«DEFINE addToPluginXmlRt(Boolean useInferredJvmModel, Boolean generateXtendInferrer, Boolean jdtTypeHierarchy) FOR Grammar»
«ENDDEFINE» 


«DEFINE addToPluginXmlUi(Boolean useInferredJvmModel, Boolean generateXtendInferrer, Boolean jdtTypeHierarchy) FOR Grammar»
«IF jdtTypeHierarchy-»
<!-- Type Hierarchy  -->
	<extension
		point="org.eclipse.ui.handlers">
		<handler 
			class="«executableExtensionFactory()»:org.eclipse.xtext.xbase.ui.hierarchy.OpenTypeHierarchyHandler"
			commandId="org.eclipse.xtext.xbase.ui.hierarchy.OpenTypeHierarchy">
			<activeWhen>
				<reference
					definitionId="«name».Editor.opened">
				</reference>
			</activeWhen>
		</handler>
		<handler 
			class="«executableExtensionFactory()»:org.eclipse.xtext.xbase.ui.hierarchy.QuickTypeHierarchyHandler"
			commandId="org.eclipse.xtext.xbase.ui.hierarchy.QuickTypeHierarchy">
			<activeWhen>
				<reference
					definitionId="«name».Editor.opened">
				</reference>
			</activeWhen>
		</handler>
	</extension>
	<extension point="org.eclipse.ui.menus">
		<menuContribution
			locationURI="popup:#TextEditorContext?after=group.open">
			<command commandId="org.eclipse.xtext.xbase.ui.hierarchy.OpenTypeHierarchy"
				style="push"
				tooltip="Open Type Hierarchy">
				<visibleWhen checkEnabled="false">
					<reference definitionId="«name».Editor.opened"/>
				</visibleWhen>
			</command>
		</menuContribution>
		<menuContribution
			locationURI="popup:#TextEditorContext?after=group.open">
			<command commandId="org.eclipse.xtext.xbase.ui.hierarchy.QuickTypeHierarchy"
				style="push"
				tooltip="Quick Type Hierarchy">
				<visibleWhen checkEnabled="false">
					<reference definitionId="«name».Editor.opened"/>
				</visibleWhen>
			</command>
		</menuContribution>
	</extension>
«ENDIF-»
«ENDDEFINE»


«DEFINE addToStandaloneSetup(Boolean useInferredJvmModel, Boolean generateXtendInferrer, Boolean jdtTypeHierarchy) FOR Grammar»
«ENDDEFINE»

