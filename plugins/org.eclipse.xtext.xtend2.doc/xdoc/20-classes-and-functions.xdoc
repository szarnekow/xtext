chapter:Xtend_Classes_Members[Classes and Members]

At a first glance an Xtend file pretty much looks like a Java file. It starts with a package 
declaration followed by an import section and a class definition.
The class in fact is directly translated to a Java class in the corresponding Java package.
As in Java, a class can have constructors, fields and methods. 

Here is an example:
code[Xtend][
  package com.acme
  
  import java.util.List
  
  class MyClass {
    String name
    
    new(String name) {
      this.name = name
    }
    
    def String first(List<String> elements) {
      elements.get(0)
    }
  }
]



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
section:packageDecl[Package Declaration]

Package declarations are mostly like in Java. There are two small differences: 
ul[
  item[An identifier can be escaped with a code[^] character in case it conflicts with a keyword.]
  item[There is no terminating semicolon.]
]

code[Xtend][
  package com.acme
]



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
section:imports[Imports]

The ordinary imports of type names are equivalent to the imports known from Java. 
Again one can escape any names conflicting with keywords using a code[^]. In contrast to Java, the 
import statement is never terminated with a semicolon. Xtend also features static imports but 
allows only a wildcard code[*] at the end, i.e. you cannot import single members using a static 
import. Non-static wildcard imports are deprecated for the benefit of better tooling. 

As in Java all classes from the code[java.lang] package are implicitly imported.
code[Xtend][
  import java.math.BigDecimal
  import static java.util.Collections.*
]

Static methods of helper classes can also be imported as e[extensions]. See the section on 
ref:extensionMethods[extension methods] for details.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
section:Xtend_ClassDeclaration[Class Declaration]

The class declaration reuses a lot of Java's syntax but still is a bit different in some aspects:
Java's default "package private" visibility does not exist in Xtend. As an Xtend class is compiled to
a top-level Java class and Java does not allow code[Java][private] or code[Java][protected] top-level
classes any Xtend class is code[Xtend][public]. It is possible to write this explicitly. 

%% e[To be implemented: ]The code[Xtend][abstract] as well as the code[Xtend][final] modifiers are directly
%% translated to Java and have the exact same meaning.

Xtend's approach to inheritance is conceptionally the same as in Java. Single inheritance of Java 
classes as well as implementing multiple Java interfaces is supported. Because Xtend classes are compiled 
to Java, Xtend classes can extend other Xtend classes, and even Java classes can inherit from Xtend classes. 

The most simple class looks like this:
code[Xtend][
  class MyClass {
  }
]

A more advanced class declaration in Xtend:
code[Xtend][
  class ArrayList<E> extends AbstractList<E>
          implements List<E>, RandomAccess, 
                     Cloneable, java.io.Serializable {
    ...
  }
]



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
section:constructors[Constructors]

An Xtend class can define one or more constructors. Unlike Java, the keyword e[new] is used to declare a constructor.
Constructors can also delegate to other constructors using code[Xtend][this(args...)] in their first
line. 
code[Xtend][
  class MyClass extends AnotherClass {
    new(String s) {
      super(s)
    }
    
    new() {
      this("default")
    }
  }
]

The same rules with regard to inheritance apply as in Java, i.e. if the super class does not define a 
no-argument constructor, you have to explicitly call one using code[Xtend][super(args...)] as the first 
expression in the body of the constructor.

The default visibility of constructors is code[Xtend][public] but you can also specify code[Xtend][protected]
or code[Xtend][private].   
 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
section:fields[Fields]

An Xtend class can define fields, too. As for Java fields, you can optionally declare an initializer
expression and use annotations on fields. Fields marked as code[Xtend][static] will be compiled to static Java fields.  

code[Xtend][
  class MyClass {
    @Nullable String name
    int count = 1
    String string = new String()
    static boolean debug = false
    ...
  }
]

The default visibility is code[Xtend][private]. You can also declare it explicitly as 
being code[Xtend][public], code[Xtend][protected], or code[Xtend][private]. 

%% Fields in Xtend are commonly used together with an annotation for a dependency injection container. Example:
%% code[Xtend][
%%   @Inject MyService myService
%% ]
%% 
%% This will translate to the following Java field: 
%% code[Java][
%%   @Inject  
%%   private MyService myService;
%% ]
A specialty of Xtend are fields that provide e[extension methods] which are covered in 
ref:extensionMethods[their own section].

 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
section:methods[Methods]

Xtend methods are declared within a class and are translated to a corresponding Java method with 
exactly the same signature. The only exceptions are dispatch methods, which are explained 
ref:polymorphicDispatch[here]. 
code[Xtend][
  def String first(List<String> elements) {
    elements.get(0);
  }
]

The default visibility of a plain method is code[Xtend][public]. You can explicitly declare it as
being code[Xtend][public], code[Xtend][protected], or code[Xtend][private].

Xtend supports the code[Xtend][static] modifier for methods:
code[Xtend][
  def static createInstance() {
    new MyClass('foo')
  }
] 


section2[Overriding Methods]

Methods can override other methods from the super class or implemented interface methods using the
keyword code[Xtend][override]. If a method overrides a method from a super type, the 
code[Xtend][override] keyword is mandatory and replaces the keyword code[Xtend][def]. As in Java 
code[Xtend][final] methods cannot be overridden by subclasses.

Example:
code[Xtend][
  override String first(List<String> elements) {
    elements.get(0);
  }
]


section2:declaredExceptions[Declared Exceptions]

Xtend does not force you to catch checked exceptions. Instead, they are rethrown in a way the compiler
does not complain about a missing throws clause, using the sneaky-throw technique introduced by 
link[http://projectlombok.org/features/SneakyThrows.html][Lombok]. Nevertheless, you can still declare 
the exceptions thrown in a method's body using the same code[Xtend][throws] clause as in Java.  
code[Xtend][
  /*
   * throws an Exception
   */
  def void throwException() throws Exception {
     throw new Exception()
  }
  
  /*
   * throws an Exception without declaring it
   */
  def void sneakyThrowException() {
     throw new Exception()
  }
]


section2:inferredReturnTypes[Inferred Return Types]

If the return type of a method can be inferred from its body it does not have to be declared.
That is the method
code[Xtend][
  def String first(List<String> elements) {
    elements.get(0);
  }
]

could be declared like this:
code[Xtend][
  def first(List<String> elements) {
    elements.get(0);
  }
]

This does not work for abstract method declarations as well as if the return type of a method 
depends on a recursive call of the same method. The compiler tells the user when it needs to be 
specified.


section2:polymorphicDispatch[Dispatch Methods]

Generally, method binding works just like method binding in Java. Method calls are bound 
based on the static types of arguments. Sometimes this is not what you want. Especially in the 
context of ref:extensionMethods[extension methods] you would like to have polymorphic behavior.

Dispatch methods make a set of overloaded methods polymorphic. That is the runtime types of all 
given arguments are used to decide which of the overloaded methods is being invoked. This 
essentially removes the need for the quite invasive visitor pattern.

A dispatch method is marked using the keyword code[Xtend][dispatch].
code[Xtend][
  def dispatch printType(Number x) { 
    "it's a number" 
  }
  
  def dispatch printType(Integer x) { 
    "it's an int" 
  }
] 

For a set of visible dispatch methods in the current type hierarchy, the compiler infers a common
signature using the common super type of all declared arguments and generates a Java method made up
of code[Java][if instanceof else] cascades. It dispatches to the different available methods. The 
actually declared methods are all compiled to Java methods that are prefixed with an underscore.

For the two dispatch methods in the example above the following Java code would be generated:
code[Java][
  protected String _printType(final Number x) {
    return "it\'s a number";
  }
  
  protected String _printType(final Integer x) {
    return "it\'s an int";
  }
  
  public String printType(final Number x) {
    if (x instanceof Integer) {
      return _printType((Integer)x);
    } else {
      return _printType(x);
    }
  }
 ]

Note that the code[Java][instanceof] cascade is ordered such that more specific types come first.

The default visibility of the underscore methods is code[Xtend][protected]. If all dispatch methods
explicitly declare the same visibility, this will be the visibility of the inferred dispatcher, too.
Otherwise it is code[Xtend][public].
 
In case there is no single most general signature, one is computed and the
different overloaded methods are matched in the order they are declared within the class file.
Example:
code[Xtend][
  def dispatch printTypes(Number x, Integer y) { 
    "it's some number and an int" 
  }
  
  def dispatch printTypes(Integer x, Number y) { 
    "it's an int and a number" 
  }
]

generates the following Java code :
code[Java][
  public String printTypes(final Number x, final Number y) {
    if (x instanceof Integer) {
      return _printTypes((Integer)x, y);
    } else if (y instanceof Integer) {
      return _printTypes(x, (Integer)y);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x, y).toString());
    }
  }
]

As you can see a code[Xtend][null] reference is never a match. If you want to fetch code[Xtend][null] 
you can declare a parameter using the type code[java.lang.Void].
code[Xtend][
  def dispatch printType(Number x) { 
    "it's some number" 
  }
  
  def dispatch printType(Integer x) { 
    "it's an int" 
  }
  
  def dispatch printType(Void x) { 
    "it's null" 
  }
]

Which compiles to the following Java code:
code[Java][
  public String printType(final Number x) {
    if (x instanceof Integer) {
      return _printType((Integer)x);
    } else if (x instanceof Number) {
      return _printType((Number)x);
    } else if (x == null) {
      return _printType((Void)null);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x).toString());
    }
  }
]

section3[Dispatch Methods and Inheritance]

Any visible Java methods from super types conforming to the compiled form of a dispatch method are
also included in the dispatch. Conforming means they have the right number of arguments and have 
the same name (starting with an underscore).

For example, consider the following Java class :
code[Java][
  public abstract class AbstractLabelProvider {
     protected String _label(Object o) {
        // some generic implementation
     }
  }
]

and the following Xtend class which extends the Java class :
code[Xtend][
  class MyLabelProvider extends AbstractLabelProvider {
     def dispatch label(Entity it)  {
       name
     }
       
     def dispatch label(Method it) { 
       name+"("+params.join(",")+"):"+type
     }
     
     def dispatch label(Field it) { 
       name+type
     }
  }
]

The resulting dispatch method in the generated Java class code[MyLabelProvider] would then look like this:
code[Java][
  public String label(final Object it) {
    if (it instanceof Entity) {
      return _label((Entity)it);
    } else if (it instanceof Field) {
      return _label((Field)it);
    } else if (it instanceof Method) {
      return _label((Method)it);
    } else {
      return _label(it);
    }
  }
]


section3[Static Dispatch Methods]

Even static dispatch methods are allowed. The same rules apply, but you cannot mix static and non-static
dispatch methods.  



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
section:Annotations[Annotations]

Xtend supports Java annotations. The syntax is exactly like defined in the 
link[http://java.sun.com/docs/books/jls/third_edition/html/j3TOC.html][Java Language Specification]. 
Annotations are available on classes, fields, methods and parameters. Here is an example:

code[Xtend][
  @TypeAnnotation(typeof(String))
  class MyClass {
    @FieldAnnotation(children = {@MyAnno(true), @MyAnno(false)})
    String myField
    
    @MethodAnnotation(children = {@MyAnno(true), @MyAnno})
    def String myMethod(@ParameterAnnotation String param) {
      //...
    }
  }
]



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
section:extensionMethods[Extension Methods]

Extensions methods are a technique to add behavior to existing classes without modifying their code. 
This feature is actually where Xtend got its name from. They are based on a simple syntactic trick: 
Instead of passing the first argument of an extension method inside the parentheses of a call, the 
method is called on the argument parameter as if it was one of its members.
code[Xtend][
  "hello".toFirstUpper() // calls toFirstUper("hello")
]   

Method calls in extension syntax often result in much better readable code, as function calls are rather
concatenated than nested. They also allow to add methods in a specific context only. 


%% To be callable in the extension syntax, a method has to be on the extension scope of the callers context.
%% Xtend supports a variety of ways to put methods on this scope. 
section2[Local Extension Methods]

All methods of the current Xtend class are automatically available in extension syntax. For example
code[Xtend][
  class MyClass {
    def doSomething(Object obj) {
      // do something with obj
    }
    
    def extensionCall(Object obj) {
      obj.doSomething()  // calls this.doSomething(obj)
    }
  }
]


section2:libraryExtensions[Library Extensions]

The static methods methods of the classes in the ref:library[Xtend runtime library] are automatically
available as extensions, e.g.
code[Xtend][
  newArrayList()       // CollectionLiterals.newArrayList()
  "hello".toFirstUpper // StringExtensions.toFirstUpper(String)
] 


section2:extensionImports[Extension Imports]

In Java, you would usually write a helper class with static methods to decorate an exisiting
class with additional behavior. In order to integrate such static helper classes, Xtend allows to put
the keyword code[Xtend][extension] after the code[Xtend][static] keyword of a ref:imports[static import]
thus making all imported static functions available as extensions methods.

The following import declaration 
code[Xtend][
  import static extension java.util.Collections.*
]

allows to use its methods like this:
code[Xtend][
  new MyClass().singletonList() 
    // calls Collections.singletonList(new MyClass())
]

Although this is supported it is generally much nicer to use ref:Extension_Fields[extension fields], because
they allow to change the actual implementation easily.    


section2:Extension_Fields[Extension Fields]

You can make the instance methods provided by the field available as extension methods, by adding the keyword 
code[Xtend][extension] to the field declaration.

Imagine you want to add a method code[fullName()] to a closed type code[Person]. With extension methods, you could 
declare the following class
code[Xtend][
  class PersonExtensions {
    def getFullName(Person p) {
      p.forename + " " + p.name
    }
  }
]

And if you have an instance of this class injected as extension like this:
code[Xtend][
  class PersonPrinter {
    @Inject extension PersonExtensions
    ...
  }
]  

The method is available on the extension scope of the class code[Person]. This is why you can skip the 
field's name. You can now write the following
code[Xtend][
  def print(Person myPerson) {
    myPerson.getFullName()
  }
]

which is translated to the Java method 
code[Xtend][
  public String print(final Person myPerson) {
    String _fullName = this._personExtensions.getFullName(myPerson);
    return _fullName;
  }
]

where code[Xtend][_personExtensions] is the default name of the field. Of course the 
property shorthand (see ref:propertyAccess[section on property access]) is still available.
code[Xtend][
  myPerson.fullName
]

Using dependency injection in combination with the extension modifier has a significant advantage over 
to static ref:extensionImports[extension imports]: You can simply exchange the component that provides
the referenced extension with another implementation without touching the client code. You will only have to 
change the binding in your dependency injection configuration. Also this gives you a general hook for any 
AOP-like thing you would want to do, or allows you to write against an SPI, where the concrete implementation 
can be provided by a third party.
